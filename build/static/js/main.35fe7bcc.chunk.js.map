{"version":3,"sources":["services/subtitles.js","functions/contains.js","functions/buildYouTubeLinkArray.js","functions/tillTheNextStamp.js","App.js","index.js"],"names":["axios","get","then","response","data","contains","query","wholeText","puncReg","regex","RegExp","source","returnThis","forEach","line","split","ord","test","push","length","findTimeInVideo","lineIndex","index","arr","hour","minutes","seconds","i","includes","substring","parseInt","buildYouTubeLinkArray","idArr","database","theList","id","filter","subtitle","videoId","text","l","time","firstTimeIndex","uTubeLink","videoID","buildLink","copyArr","pickedNumbers","number","Math","floor","random","indexOf","shuffle","tillTheNextStamp","firstTime","secondTimeIndex","slice","reduce","sub","join","getSubtitleBetweenTwoStamps","App","useState","subtitles","setSubtitles","setQuery","youTubeLinks","setYouTubeLinks","playingVideo","setPlayingVideo","videoIndex","setVideoIndex","setCurrentVideoId","setWholeText","shownSubtitles","setShownSubtitles","showSubtitle","setShowSubtitle","showStats","setShowStats","useEffect","subtitleService","showWhenVisible","display","showWhenVisible1","handleSubmit","event","a","preventDefault","youTubeLinkList","videoIDsThatContain","youtubeLink","currentWholeText","error","setTimeout","handleNext","theTextBetweenTwoStamps","handleBack","handleKÃ¶rOm","onSubmit","value","onChange","target","size","type","onClick","style","width","height","src","frameBorder","allow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35fe7bcc.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/subtitles'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n  getAll\r\n}","function contains(query, wholeText){\r\n  let word = query\r\n  let puncReg = /[.,\"'?!;:]*/\r\n  let startReg = /^/\r\n  let endReg = /$/\r\n  let regex = new RegExp(startReg.source +\r\n        puncReg.source +\r\n        word +\r\n        puncReg.source +\r\n        endReg.source , 'i' )\r\n\r\n  let returnThis = []\r\n  wholeText.forEach( function(line){\r\n    let lineArr = line.split(' ')\r\n    lineArr.forEach(function(ord){\r\n      if(regex.test(ord)){\r\n        //console.log( `\"${word}\" is found`);\r\n        returnThis.push(line)\r\n      }\r\n    })\r\n  })\r\n  return returnThis.length !== 0\r\n}\r\n\r\nexport default contains","function convertArrayTimeIntoSeconds(arr){\r\n  return parseInt(arr[0])*3600 + parseInt(arr[1])*60 + parseInt(arr[2])\r\n}\r\n\r\nfunction findTimeInVideo(lineIndex, wholeText){\r\n  let hour = ''\r\n  let minutes = ''\r\n  let seconds = ''\r\n  let index\r\n\r\n  for(let i = lineIndex ; i > 0 ; i--){\r\n    if(wholeText[i].includes('-->')){\r\n      hour = wholeText[i].substring(0,2)\r\n      //console.log(hour);\r\n      minutes = wholeText[i].substring(3,5)\r\n      //console.log(minutes);\r\n      seconds = wholeText[i].substring(6,8)\r\n      //console.log(seconds);\r\n      index = i\r\n      break\r\n    }\r\n  }\r\n\r\n  return { 'time': convertArrayTimeIntoSeconds([hour, minutes, seconds]), 'firstTimeIndex': index }\r\n}\r\n\r\n//shuffle an Array\r\nfunction shuffle(arr){\r\n  let copyArr = []\r\n  let pickedNumbers = []\r\n  let length = arr.length\r\n  let i = 0\r\n\r\n  while(i<length){\r\n    let number = Math.floor(Math.random()*length)\r\n    if(pickedNumbers.indexOf(number)===-1){\r\n      i++\r\n      pickedNumbers.push(number)\r\n      copyArr.push(arr[number])\r\n    }\r\n  }\r\n  return copyArr\r\n}\r\n\r\nfunction buildLink(videoID, time){\r\n  return `https://www.youtube.com/embed/${videoID}?start=${time}&autoplay=1&cc_load_policy=1&cc_lang_pref=sv`\r\n}\r\n\r\n\r\nfunction buildYouTubeLinkArray(query, idArr, database){\r\n  let word = query\r\n  let puncReg = /[.,\"'?!;:]*/\r\n  let startReg = /^/\r\n  let endReg = /$/\r\n  let regex = new RegExp(startReg.source +\r\n        puncReg.source +\r\n        word +\r\n        puncReg.source +\r\n        endReg.source , 'i' )\r\n\r\n  //copy this into the global youtube link array\r\n  let theList = []\r\n\r\n  idArr.forEach(function(id){\r\n    let wholeText = database.filter( subtitle => subtitle.videoId === id )[0].text\r\n    let l = wholeText.length\r\n\r\n    for(let i = 0; i < l - 1 ; i++){\r\n      let time\r\n      let firstTimeIndex\r\n      let uTubeLink = ''\r\n      let wordArr = wholeText[i].split(' ')\r\n      wordArr.forEach(function(ord){\r\n        if(regex.test(ord)){\r\n          time = findTimeInVideo(i,wholeText).time\r\n          firstTimeIndex = findTimeInVideo(i, wholeText).firstTimeIndex\r\n          uTubeLink = buildLink(id,time)\r\n          theList.push({\r\n            'youtubeLink': uTubeLink,\r\n            'time': time,\r\n            'firstTimeIndex': firstTimeIndex,\r\n            'lineIndex': i,\r\n            'wholeText': wholeText })\r\n        }\r\n      })\r\n\r\n    }\r\n  })\r\n  return shuffle(theList)\r\n}\r\n\r\n\r\nexport default buildYouTubeLinkArray\r\n\r\n","function convertArrayTimeIntoSeconds(arr){\r\n  return parseInt(arr[0])*3600 + parseInt(arr[1])*60 + parseInt(arr[2])\r\n}\r\n\r\n//Must return the text between two time stamps ( which includes -->) and the time difference between the two\r\nfunction tillTheNextStamp(firstTime, firstTimeIndex, wholeText) {\r\n  var hour = ''\r\n  var minutes = ''\r\n  var seconds = ''\r\n  var secondTime\r\n  var secondTimeIndex\r\n  var textBetweenTwoStamps\r\n\r\n  //console.log('firstTime:', firstTime)\r\n  //console.log('firstTimeIndex:', firstTimeIndex)\r\n\r\n  for(let i = firstTimeIndex + 1 ; i < wholeText.length - 1 ; i++){\r\n    if(wholeText[i].includes('-->')){\r\n      hour = wholeText[i].substring(0,2)\r\n      //console.log(hour);\r\n      minutes = wholeText[i].substring(3,5)\r\n      //console.log(minutes);\r\n      seconds = wholeText[i].substring(6,8)\r\n      //console.log(seconds);\r\n      secondTimeIndex = i\r\n      //console.log('secondTimeIndex:', secondTimeIndex)\r\n      break\r\n    }\r\n  }\r\n\r\n  secondTime = convertArrayTimeIntoSeconds([hour, minutes, seconds])\r\n  let difference = secondTime - firstTime\r\n  textBetweenTwoStamps = getSubtitleBetweenTwoStamps(wholeText, firstTimeIndex, secondTimeIndex)\r\n  return { 'timeDifference': difference, 'text': textBetweenTwoStamps }\r\n}\r\n\r\nfunction getSubtitleBetweenTwoStamps(wholeText, firstTimeIndex, secondTimeIndex) {\r\n  let subtitleBetweenTwoStamps = wholeText.slice(firstTimeIndex + 1 , secondTimeIndex)\r\n  //console.log(subtitleBetweenTwoStamps)\r\n  let returnThis = subtitleBetweenTwoStamps.reduce(function( sub, line) {\r\n    return sub + line + '\\n'\r\n  }, '' )\r\n  return returnThis.split('\\n').slice(0, -1).join('\\n')\r\n}\r\n\r\nexport default tillTheNextStamp","/* eslint-disable quotes */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport axios from 'axios'\r\nimport subtitleService from './services/subtitles'\r\nimport contains from './functions/contains'\r\nimport buildYouTubeLinkArray from './functions/buildYouTubeLinkArray'\r\nimport tillTheNextStamp from './functions/tillTheNextStamp'\r\n\r\nconst App = () => {\r\n  const [subtitles, setSubtitles] = useState([])\r\n  const [query, setQuery] = useState('')\r\n  const [youTubeLinks, setYouTubeLinks] = useState([])\r\n  const [playingVideo, setPlayingVideo] = useState('https://www.youtube.com/embed/RGOj5yH7evk')\r\n  const [videoIndex, setVideoIndex] = useState(0)\r\n  const [currentVideoId, setCurrentVideoId] = useState('')\r\n  const [wholeText, setWholeText] = useState([]) //the text part of the playing subtitle\r\n  const [shownSubtitles, setShownSubtitles] = useState(null)\r\n  const [intervalTime, setIntervalTime] = useState(0)\r\n  const [showSubtitle ,setShowSubtitle] = useState(false)\r\n  const [showStats, setShowStats] = useState(false)\r\n\r\n  useEffect(() => {\r\n    subtitleService\r\n      .getAll()\r\n      .then(subtitles => {\r\n        setSubtitles(subtitles)\r\n      })\r\n  }, [])\r\n\r\n  const showWhenVisible = { display: showSubtitle ? '' : 'none' }\r\n  const showWhenVisible1 = { display: showStats ? '' : 'none' }\r\n  /*\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setShownSubtitles(subtitles => subtitles + 1 )\r\n    }, 5000)\r\n    return () => clearInterval(interval)\r\n  }, [shownSubtitles])\r\n  */\r\n\r\n  //console.log(subtitles)\r\n\r\n  //\r\n  const handleSubmit = async(event) => {\r\n    event.preventDefault()\r\n    let youTubeLinkList = []\r\n    let videoIDsThatContain = []\r\n    try {\r\n      subtitles.forEach(subtitle => {\r\n        if(contains(query, subtitle.text)){\r\n          videoIDsThatContain.push(subtitle.videoId)\r\n        }\r\n      })\r\n      youTubeLinkList = buildYouTubeLinkArray(query, videoIDsThatContain, subtitles)\r\n      setYouTubeLinks(youTubeLinkList)\r\n      setPlayingVideo(youTubeLinkList[0].youtubeLink)\r\n      setVideoIndex(0)\r\n      let videoId = youTubeLinkList[0].youtubeLink.substring(30,41)\r\n      setCurrentVideoId(videoId)\r\n      let currentWholeText = youTubeLinkList[0].wholeText\r\n      setWholeText(currentWholeText)\r\n      let time = youTubeLinkList[0].time\r\n      //console.log(time)\r\n      let firstTimeIndex = youTubeLinkList[0].firstTimeIndex\r\n      //console.log(firstTimeIndex)\r\n      let theTextBetweenTwoStamps = tillTheNextStamp(time, firstTimeIndex, currentWholeText)\r\n      //console.log(theTextBetweenTwoStamps)\r\n      /*\r\n      setShownSubtitles(theTextBetweenTwoStamps.text)\r\n      setShowSubtitle(true)\r\n      let timeOut = theTextBetweenTwoStamps.timeDifference*1000 + 4000\r\n      setTimeout(() => {\r\n        setShowSubtitle(false)\r\n      }, timeOut)\r\n      */\r\n      setShowStats(true)\r\n    } catch (error) {\r\n      if(videoIDsThatContain.length === 0) {\r\n        setShowStats(false)\r\n        setPlayingVideo('https://www.youtube.com/embed/RGOj5yH7evk')\r\n        setYouTubeLinks([])\r\n        setShownSubtitles(`nothing found for ${query}`)\r\n        setShowSubtitle(true)\r\n        setTimeout(() => {\r\n          setShownSubtitles(null)\r\n          setShowSubtitle(false)\r\n        }, 3000)\r\n      }\r\n    }\r\n  }\r\n  //\r\n\r\n  //\r\n  const handleNext = async(event) => {\r\n    event.preventDefault()\r\n    if(videoIndex < (youTubeLinks.length-1)){\r\n      setVideoIndex(videoIndex+1)\r\n      setPlayingVideo(youTubeLinks[videoIndex+1].youtubeLink)\r\n      let videoId = youTubeLinks[videoIndex+1].youtubeLink.substring(30,41)\r\n      setCurrentVideoId(videoId)\r\n      let currentWholeText = youTubeLinks[videoIndex+1].wholeText\r\n      setWholeText(currentWholeText)\r\n      let time = youTubeLinks[videoIndex+1].time\r\n      //console.log(time)\r\n      let firstTimeIndex = youTubeLinks[videoIndex+1].firstTimeIndex\r\n      //console.log(firstTimeIndex)\r\n      let theTextBetweenTwoStamps = tillTheNextStamp(time, firstTimeIndex, currentWholeText)\r\n      //console.log(theTextBetweenTwoStamps)\r\n      setShownSubtitles(theTextBetweenTwoStamps.text)\r\n      /*\r\n      setShowSubtitle(true)\r\n      let timeOut = theTextBetweenTwoStamps.timeDifference*1000 + 4000\r\n      setTimeout(() => {\r\n        setShowSubtitle(false)\r\n      }, timeOut)\r\n      */\r\n    }\r\n  }\r\n  //\r\n  const handleBack = async(event) => {\r\n    event.preventDefault()\r\n    if(videoIndex >= 1){\r\n      setVideoIndex(videoIndex-1)\r\n      setPlayingVideo(youTubeLinks[videoIndex-1].youtubeLink)\r\n      let videoId = youTubeLinks[videoIndex-1].youtubeLink.substring(30,41)\r\n      setCurrentVideoId(videoId)\r\n      let currentWholeText = youTubeLinks[videoIndex-1].wholeText\r\n      setWholeText(currentWholeText)\r\n      let time = youTubeLinks[videoIndex-1].time\r\n      //console.log(time)\r\n      let firstTimeIndex = youTubeLinks[videoIndex-1].firstTimeIndex\r\n      //console.log(firstTimeIndex)\r\n      let theTextBetweenTwoStamps = tillTheNextStamp(time, firstTimeIndex, currentWholeText)\r\n      //console.log(theTextBetweenTwoStamps)\r\n      setShownSubtitles(theTextBetweenTwoStamps.text)\r\n      /*\r\n      setShowSubtitle(true)\r\n      let timeOut = theTextBetweenTwoStamps.timeDifference*1000 + 4000\r\n      setTimeout(() => {\r\n        setShowSubtitle(false)\r\n      }, timeOut)\r\n      */\r\n    }\r\n  }\r\n\r\n  const handleKÃ¶rOm = async(event) => {\r\n    event.preventDefault()\r\n    const link = playingVideo\r\n    setPlayingVideo(`${link} `)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>youttala</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input value={query} onChange={({ target }) => setQuery(target.value)} size=\"62\" type='text'></input>\r\n        <button type='submit'>kÃ¶r</button>\r\n      </form>\r\n      <div id='play-bar'>\r\n        <button onClick={handleBack}>back</button>\r\n        <button onClick={handleKÃ¶rOm}>kÃ¶r om</button>\r\n        <button onClick={handleNext}>next</button>\r\n      </div>\r\n      <p style={showWhenVisible1}>{videoIndex+1} av {youTubeLinks.length} </p>\r\n      <br></br>\r\n      <iframe id=\"ytplayer\" type=\"text/html\" width=\"640\" height=\"360\"\r\n        src={playingVideo}\r\n        frameBorder=\"0\"\r\n        allow='autoplay' >\r\n      </iframe>\r\n      <p style={showWhenVisible}>{shownSubtitles}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","/* eslint-disable linebreak-style */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}