{"version":3,"sources":["services/subtitles.js","functions/contains.js","functions/buildYouTubeLinkArray.js","functions/tillTheNextStamp.js","components/Header.js","components/SearchBar.js","components/Player.js","components/Subtitle.js","components/Footer.js","components/AdminBar.js","components/About.js","AppCopy1.js","index.js"],"names":["baseUrl","getAll","axios","get","then","response","data","reportBug","subtitleToBeModified","a","url","videoId","put","deleteBuggyLines","id","contains","query","wholeText","puncReg","regex","RegExp","source","returnThis","forEach","line","split","ord","test","push","length","findTimeInVideo","lineIndex","timeStamp","index","arr","hour","minutes","seconds","i","includes","substring","parseInt","findNextTime","firstTimeIndex","nextTimeStamp","secondTimeIndex","buildYouTubeLinkArray","idArr","database","theList","filter","subtitle","text","l","time","uTubeLink","videoID","buildLink","copyArr","pickedNumbers","number","Math","floor","random","indexOf","shuffle","tillTheNextStamp","firstTime","subtitleEndHour","subtitleEndMinutes","subtitleEndSeconds","slice","reduce","sub","join","getSubtitleBetweenTwoStamps","Header","props","className","onClick","logo","home","about","SearchBar","onSubmit","handleSubmit","autoFocus","value","type","placeholder","onChange","handleQueryChange","Player","showWhenVisible","display","showStats","showWhenNotVisible","opts","onPlay","title","handleBack","size","handleKörOm","handleNext","style","videoIndex","handleBug","Subtitle","shownSubtitles","shownSubtitlesArr","showSubtitle","handleShow","handleHide","hideWhenVisible","map","word","color","Footer","useState","href","AdminBar","border","borderWidth","searchVideoById","queryVideoId","handleQueryVideoIdChange","adminMessage1","searchBugById","queryBugId","handleQueryBugIdChange","adminMessage2","handleCorrect","adminMessage3","About","showGuide","setShowGuide","event","preventDefault","handleKörBara","AppCopy1","subtitles","setSubtitles","appReady","setAppReady","setQuery","youTubeLinks","setYouTubeLinks","setVideoIndex","currentVideoId","setCurrentVideoId","setWholeText","setShownSubtitles","setShownSubtitlesArr","setShowSubtitle","setShowStats","playingVideoTime","setPlayingVideoTime","width","setWidth","height","setHeight","youTubeContainerClassName","autoplay","setAutoplay","setFirstTimeIndex","setAbout","setQueryVideoId","bugId","setBugId","adminMesssage1","setAdminMessage1","currentSubtitle","setCurrentSubtitle","setAdminMessage2","setAdminMessage3","randomWords","useEffect","subtitleService","ReactGA","initialize","pageview","window","innerWidth","addEventListener","updateWidth","target","console","log","youTubeLinkList","videoIDsThatContain","currentWholeText","error","playerVars","cc_lang_pref","start","cc_load_policy","enablejsapi","theTextBetweenTwoStamps","timeOut","timeDifference","setTimeout","subtitleObject","buggyLines","youTubeLink","mseconds","find","bug","buggyText","lineText","link","youtubeLink","confirm","buggyLine","deleteFrom","deleteUpTo","deleteCount","correctedBuggyLines","correctedText","splice","reset","handleHome","handleLogoButton","containerClassName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4be76f05.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-unused-vars */\r\nimport axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/subtitles'\r\nconst baseUrl = '/api/subtitles'\r\n// eslint-disable-next-line linebreak-style\r\nconst aboutUrl = '/api/about'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst reportBug = async(subtitleToBeModified) => {\r\n  const url = `${baseUrl}/${subtitleToBeModified.videoId}`\r\n  const response = await axios.put(url, subtitleToBeModified)\r\n  return response.data\r\n}\r\n\r\nconst deleteBuggyLines = async(subtitleToBeModified) => {\r\n  const url = `${baseUrl}/${subtitleToBeModified.id}`\r\n  const response = await axios.put(url, subtitleToBeModified)\r\n  return response.data\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  reportBug,\r\n  deleteBuggyLines\r\n}","function contains(query, wholeText){\r\n  let word = query\r\n  let puncReg = /[.,\"'?!;:]*/\r\n  let startReg = /^/\r\n  let endReg = /$/\r\n  let regex = new RegExp(startReg.source +\r\n        puncReg.source +\r\n        word +\r\n        puncReg.source +\r\n        endReg.source , 'i' )\r\n\r\n  let returnThis = []\r\n  wholeText.forEach( function(line){\r\n    let lineArr = line.split(' ')\r\n    lineArr.forEach(function(ord){\r\n      if(regex.test(ord)){\r\n        //console.log( `\"${word}\" is found`);\r\n        returnThis.push(line)\r\n      }\r\n    })\r\n  })\r\n  return returnThis.length !== 0\r\n}\r\n\r\nexport default contains","/* eslint-disable no-unused-vars */\r\nfunction convertArrayTimeIntoSeconds(arr){\r\n  return parseInt(arr[0])*3600 + parseInt(arr[1])*60 + parseInt(arr[2])\r\n}\r\n\r\nfunction findTimeInVideo(lineIndex, wholeText){\r\n  let timeStamp\r\n  let hour = ''\r\n  let minutes = ''\r\n  let seconds = ''\r\n  let index\r\n\r\n  for(let i = lineIndex ; i > 0 ; i--){\r\n    if(wholeText[i].includes('-->')){\r\n      timeStamp = wholeText[i]\r\n      hour = wholeText[i].substring(0,2)\r\n      //console.log(hour);\r\n      minutes = wholeText[i].substring(3,5)\r\n      //console.log(minutes);\r\n      seconds = wholeText[i].substring(6,8)\r\n      //console.log(seconds);\r\n      index = i\r\n      break\r\n    }\r\n  }\r\n\r\n  return { 'timeStamp': timeStamp, 'time': convertArrayTimeIntoSeconds([hour, minutes, seconds]), 'firstTimeIndex': index }\r\n}\r\n\r\nfunction findNextTime(firstTimeIndex, wholeText){\r\n  let nextTimeStamp\r\n  let secondTimeIndex\r\n\r\n  for(let i = firstTimeIndex + 1 ; i < wholeText.length - 1 ; i++){\r\n    if(wholeText[i].includes('-->')){\r\n      nextTimeStamp = wholeText[i]\r\n      //console.log(seconds);\r\n      secondTimeIndex = i\r\n      //console.log('secondTimeIndex:', secondTimeIndex)\r\n      break\r\n    }\r\n  }\r\n\r\n  return { 'nextTimeStamp': nextTimeStamp, 'secondTimeIndex': secondTimeIndex }\r\n}\r\n\r\n//shuffle an Array\r\nfunction shuffle(arr){\r\n  let copyArr = []\r\n  let pickedNumbers = []\r\n  let length = arr.length\r\n  let i = 0\r\n\r\n  while(i<length){\r\n    let number = Math.floor(Math.random()*length)\r\n    if(pickedNumbers.indexOf(number)===-1){\r\n      i++\r\n      pickedNumbers.push(number)\r\n      copyArr.push(arr[number])\r\n    }\r\n  }\r\n  return copyArr\r\n}\r\n\r\nfunction buildLink(videoID, time){\r\n  return `https://www.youtube.com/embed/${videoID}?start=${time}&autoplay=1&cc_load_policy=1&cc_lang_pref=sv`\r\n}\r\n\r\n\r\nfunction buildYouTubeLinkArray(query, idArr, database){\r\n  let word = query\r\n  let puncReg = /[.,\"'?!;:]*/\r\n  let startReg = /^/\r\n  let endReg = /$/\r\n  let regex = new RegExp(startReg.source +\r\n        puncReg.source +\r\n        word +\r\n        puncReg.source +\r\n        endReg.source , 'i' )\r\n\r\n  //copy this into the global youtube link array\r\n  let theList = []\r\n\r\n  idArr.forEach(function(id){\r\n    let wholeText = database.filter( subtitle => subtitle.videoId === id )[0].text\r\n    let l = wholeText.length\r\n\r\n    for(let i = 0; i < l - 1 ; i++){\r\n      let time\r\n      let timeStamp\r\n      let firstTimeIndex\r\n      let uTubeLink = ''\r\n      let wordArr = wholeText[i].split(' ')\r\n      wordArr.forEach(function(ord){\r\n        if(regex.test(ord)){\r\n          time = findTimeInVideo(i,wholeText).time\r\n          timeStamp = findTimeInVideo(i, wholeText).timeStamp\r\n          firstTimeIndex = findTimeInVideo(i, wholeText).firstTimeIndex\r\n          uTubeLink = buildLink(id,time)\r\n          theList.push({\r\n            'youtubeLink': uTubeLink,\r\n            'id': id,\r\n            'time': time,\r\n            'timeStamp': timeStamp,\r\n            'firstTimeIndex': firstTimeIndex,\r\n            'nextTimeStamp': findNextTime(firstTimeIndex, wholeText).nextTimeStamp,\r\n            'secondTimeIndex': findNextTime(firstTimeIndex, wholeText).secondTimeIndex,\r\n            'lineIndex': i,\r\n            'wholeText': wholeText,\r\n            'lineText': wholeText[i]\r\n          })\r\n        }\r\n      })\r\n\r\n    }\r\n  })\r\n  return shuffle(theList)\r\n}\r\n\r\n\r\nexport default buildYouTubeLinkArray\r\n\r\n","/* eslint-disable no-unused-vars */\r\nfunction convertArrayTimeIntoSeconds(arr){\r\n  return parseInt(arr[0])*3600 + parseInt(arr[1])*60 + parseInt(arr[2])\r\n}\r\n\r\n//Must return the text between two time stamps ( which includes -->) and the time difference between the two\r\nfunction tillTheNextStamp(firstTime, firstTimeIndex, wholeText) {\r\n  var hour = ''\r\n  var minutes = ''\r\n  var seconds = ''\r\n  var nextTimeStamp\r\n  var secondTimeIndex\r\n  var textBetweenTwoStamps\r\n\r\n  //console.log('firstTime:', firstTime)\r\n  //console.log('firstTimeIndex:', firstTimeIndex)\r\n\r\n  for(let i = firstTimeIndex + 1 ; i < wholeText.length - 1 ; i++){\r\n    if(wholeText[i].includes('-->')){\r\n      nextTimeStamp = wholeText[i]\r\n      //console.log(seconds);\r\n      secondTimeIndex = i\r\n      //console.log('secondTimeIndex:', secondTimeIndex)\r\n      break\r\n    }\r\n  }\r\n\r\n  //For the time difference\r\n  let timeStamp = nextTimeStamp.split(' --> ')\r\n  let subtitleEndHour = timeStamp[0].substring(0,2)\r\n  let subtitleEndMinutes = timeStamp[0].substring(3,5)\r\n  let subtitleEndSeconds = timeStamp[0].substring(6,8)\r\n  let secondTime = convertArrayTimeIntoSeconds([subtitleEndHour, subtitleEndMinutes, subtitleEndSeconds])\r\n\r\n  let difference = secondTime - firstTime\r\n\r\n  textBetweenTwoStamps = getSubtitleBetweenTwoStamps(wholeText, firstTimeIndex, secondTimeIndex)\r\n  return { 'timeDifference': difference, 'text': textBetweenTwoStamps, 'nextTimeStamp': nextTimeStamp }\r\n}\r\n\r\nfunction getSubtitleBetweenTwoStamps(wholeText, firstTimeIndex, secondTimeIndex) {\r\n  let subtitleBetweenTwoStamps = wholeText.slice(firstTimeIndex + 1 , secondTimeIndex)\r\n  //console.log(subtitleBetweenTwoStamps)\r\n  let returnThis = subtitleBetweenTwoStamps.reduce(function( sub, line) {\r\n    return sub + line + '\\n'\r\n  }, '' )\r\n  return returnThis.split('\\n').slice(0, -1).join('\\n')\r\n}\r\n\r\nexport default tillTheNextStamp","/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"main-header\">\r\n      <a onClick={props.logo} className=\"brand-logo\">\r\n        <div className=\"brand-logo-name\">youttala</div>\r\n      </a>\r\n      <div className=\"main-nav\">\r\n        <ul>\r\n          <li><a className='header-button' onClick={props.home}>home</a></li>\r\n          <li><a className='header-button' onClick={props.about}>about</a></li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","/* eslint-disable linebreak-style */\r\n// eslint-disable-next-line linebreak-style\r\n/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\n\r\n\r\nconst SearchBar = (props) => {\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit = {props.handleSubmit}>\r\n        <input autoFocus className=\"searchbar\" value={props.query} type='text' placeholder='how to pronounce...' onChange={props.handleQueryChange}></input>\r\n        <button className=\"search-button\" type='submit'>search</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\nimport YouTube from 'react-youtube'\r\nimport { FaBackward } from 'react-icons/fa'\r\nimport { FaForward } from 'react-icons/fa'\r\nimport { FaRedo } from 'react-icons/fa'\r\nimport { FaExclamationCircle } from 'react-icons/fa'\r\n\r\nconst Player = (props) => {\r\n\r\n  const showWhenVisible = { display: props.showStats ? '' : 'none' }\r\n  const showWhenNotVisible = { display: props.showStats ? 'none' : '' }\r\n\r\n  return (\r\n    <div className='player'>\r\n      <div className=\"video\">\r\n        <YouTube videoId={props.videoId} opts={props.opts} onPlay={props.onPlay}></YouTube>\r\n      </div>\r\n      <div className=\"player-bar\">\r\n        <div className=\"empty\">\r\n\r\n        </div>\r\n        <div className=\"button-set\">\r\n          <div>\r\n            <button className=\"button\" title='Previous video' id='back-button' onClick={props.handleBack}><FaBackward size= {23}/></button>\r\n          </div>\r\n          <div>\r\n            <button className=\"button\" id='restart-button' title='replay' onClick={props.handleKörOm}><FaRedo size= {23}/></button>\r\n          </div>\r\n          <div>\r\n            <button className=\"button\" id='next-button' title='next video' onClick={props.handleNext}><FaForward size= {23}/></button>\r\n          </div>\r\n        </div>\r\n        <div className=\"extras\">\r\n          <span style={showWhenVisible}> {props.videoIndex} of {props.length}</span>\r\n          <span style={showWhenNotVisible}></span>\r\n          <button style={showWhenVisible} className=\"button\" id='bug-button' title='report a bug' onClick={props.handleBug}><FaExclamationCircle size= {13}/></button>\r\n          <span style={showWhenNotVisible}></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react'\r\nimport { FaCopy } from 'react-icons/fa'\r\nimport { FaEye } from 'react-icons/fa'\r\n\r\nconst Subtitle = ({ shownSubtitles, shownSubtitlesArr, showSubtitle, handleShow, handleHide, query }) => {\r\n\r\n  const hideWhenVisible = { display: showSubtitle ? 'none' : '' }\r\n  const showWhenVisible = { display: showSubtitle ? '' : 'none' }\r\n\r\n  let word = query\r\n  let puncReg = /[.,\"'?!;:]*/\r\n  let startReg = /^/\r\n  let endReg = /$/\r\n  let regex = new RegExp(startReg.source +\r\n        puncReg.source +\r\n        word +\r\n        puncReg.source +\r\n        endReg.source , 'i' )\r\n\r\n  const beforeSearch = () => (\r\n    <div className=\"first-subtitle\">\r\n      <div className=\"yarrak\">\r\n        you can find your search result here!\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const afterSearch = () => (\r\n    <div>\r\n      <div style={showWhenVisible}>\r\n        <span>{shownSubtitles}</span>\r\n        <button>copy</button>\r\n        <button onClick={handleHide}>hide</button>\r\n      </div>\r\n      <div style={hideWhenVisible}>\r\n        <span>See your search result!</span>\r\n        <button onClick={handleShow}>show</button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const afterSearchXd = () => (\r\n    <div>\r\n      <div className=\"subtitle\" style={showWhenVisible}>\r\n        <div className=\"subtitle-buttons\">\r\n          <button style ={{ display: 'none' }} className=\"button\"><FaCopy size= {13}/></button>\r\n          <button className=\"button\" title='hide the search result' onClick={handleHide}><FaEye size={13}/></button>\r\n        </div>\r\n        <div className=\"subtitle-subtitle\">\r\n          <p className=\"paragraph\">\r\n            {shownSubtitlesArr.map( (word, i=0) =>\r\n              <span\r\n                style={{ color: regex.test(word) ? 'red' : 'black' }}\r\n                key={word + i+1}>{`${word} `}</span>\r\n            )}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"hidden-subtitle\" style={hideWhenVisible}>\r\n        <div id=\"three-dots\">\r\n          <span></span>\r\n        </div>\r\n        <div id=\"show-button-bar\">\r\n          <button className=\"button\" title='show the search result' onClick={handleShow}><FaEye size={13}/></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*\r\n  const afterSearchXd = () => (\r\n    <div>\r\n      <div style={showWhenVisible}>\r\n        {shownSubtitlesArr.map( (word, i=0) =>\r\n          <span\r\n            style={{ color: regex.test(word) ? 'red' : 'black' }}\r\n            key={word + i+1}>{word}&nbsp;</span>\r\n        )}\r\n        <button>copy</button>\r\n        <button onClick={handleHide}>hide</button>\r\n      </div>\r\n      <div style={hideWhenVisible}>\r\n        <span>See your search result!</span>\r\n        <button onClick={handleShow}>show</button>\r\n      </div>\r\n    </div>\r\n  )\r\n  */\r\n\r\n\r\n  return (\r\n    <div>\r\n      {shownSubtitles === null ? beforeSearch() : afterSearchXd() }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Subtitle\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react'\r\nimport { FaRegPaperPlane } from 'react-icons/fa'\r\n\r\nconst Footer = () => {\r\n  const [showMail, setShowMail] = useState(false)\r\n\r\n  /*\r\n  return (\r\n    <div className=\"main-footer\">\r\n      <nav className=\"footer-nav\">\r\n        <ul>\r\n          <li><a href=\"#\">&#169;2020 youttala.</a></li>\r\n          <li><a href=\"#\">e-mail</a></li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  )\r\n  */\r\n  return (\r\n    <div className=\"main-footer\">\r\n      <span id='copyright'>&#169; 2020, youttala. all rights reserved.</span>\r\n      <span title='contact' id='contact'>info@youttala.com <a id='e-mail-a' href=\"mailto:info@youttala.com\"><FaRegPaperPlane/></a></span>\r\n      <span title='contact' id='contact-small'><a id='e-mail-a' href=\"mailto:info@youttala.com\"><FaRegPaperPlane/></a></span>\r\n    </div>\r\n  )\r\n/*\r\n  return (\r\n    <div>\r\n      <footer>\r\n        <ul>\r\n          <li>license</li>\r\n          <li>e-mail</li>\r\n        </ul>\r\n      </footer>\r\n    </div>\r\n  )\r\n*/\r\n}\r\n\r\nexport default Footer","/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\n\r\n//Will be hidden with CSS style, be used to correct buggy lines.\r\nconst AdminBar = (props) => {\r\n\r\n  //Change display to '' to be be eligible to correct the buggyLines\r\n  const style = {\r\n    display: 'none' ,\r\n    border: 'solid',\r\n    borderWidth: 1,\r\n  }\r\n\r\n  /*\r\n  <span>{props.adminMessage}</span>\r\n  <br></br>\r\n  Query bugId:\r\n  <input value={props.queryBugId} type='text' onChange={props.handleQueryBugIdChange}></input>\r\n  <button onClick={props.handleCorrect}>correct</button>\r\n  <span>{props.adminMessage}</span>\r\n  */\r\n\r\n  return (\r\n    <div style={style}>\r\n        admin bar, correct buggy lines!\r\n      <br></br>\r\n        OBS! dont forget to enable the correct put route and disable the other one in backend!\r\n      <br></br>\r\n        Search by videoId, once found search by bugId, once found remove it\r\n      <form onSubmit = {props.searchVideoById}>\r\n        Query videoId:\r\n        <input value={props.queryVideoId} type='text' onChange={props.handleQueryVideoIdChange}></input>\r\n        <button type='submit'>search by id</button>\r\n      </form>\r\n      <span>{props.adminMessage1}</span>\r\n      <br></br>\r\n      <form onSubmit={props.searchBugById}>\r\n        Query bugId:\r\n        <input value={props.queryBugId} type='text' onChange={props.handleQueryBugIdChange}></input>\r\n        <button type='submit'>search bug</button>\r\n      </form>\r\n      <span>{props.adminMessage2}</span>\r\n      <br></br>\r\n      <button onClick={props.handleCorrect}>remove the buggy part</button>\r\n      <br></br>\r\n      <span>{props.adminMessage3}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminBar\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react'\r\nimport { FaHeadphones } from 'react-icons/fa'\r\nimport { FaExclamationCircle, FaAngleDown, FaAngleUp, FaSpinner } from 'react-icons/fa'\r\n\r\nconst About = (props) => {\r\n  const [showGuide, setShowGuide] = useState(false)\r\n\r\n  const handleShow = async(event) => {\r\n    event.preventDefault()\r\n    setShowGuide(!showGuide)\r\n  }\r\n\r\n\r\n  return (\r\n    <div id='about-container'>\r\n      <h1 id='about-title'>Hej!</h1>\r\n      <div id='about-description'>\r\n        Welcome to youttala!\r\n        <br></br>\r\n        <br></br>\r\n        youttala is a web application where Swedish learners can instantly learn how\r\n        Swedish words are actually pronounced by watching YouTube!\r\n        In youttala, you can hear the pronunciation of a word from real Swedish speakers in real use cases!\r\n        Just type the word you want to hear and search.\r\n        <br></br>\r\n        <br></br>\r\n         We hope that youttala would be a useful tool and wish you good luck in the learning journey!\r\n        <br></br>\r\n        <br></br>\r\n        <span>Before we start, please take a look at the quick guideline!\r\n          <a className='angle' style={{ display: showGuide ? 'none' : '' }} onClick={handleShow}><FaAngleDown size={13}/></a>\r\n          <a className='angle' style={{ display: showGuide ? '' : 'none' }} onClick={handleShow}><FaAngleUp size={13}/></a></span>\r\n        <div id='guideline' style={{ display: showGuide ? '' : 'none' }}>\r\n          <div id='guideline-content'>\r\n            <FaSpinner className='spinner' size={10}/> For now, it is only possible to search a word,\r\n         so if you try to search a particle verb or a sentence, it would not work.\r\n            <br></br>\r\n            <br></br>\r\n            <FaSpinner className='spinner' size={10}/> We would be very happy if you help us and other learners by reporting bugs by clicking on\r\n        this sign <FaExclamationCircle size={10}/> that is located in the right-bottom corner of the player console.\r\n            <br></br>\r\n            <br></br>\r\n            <FaSpinner className='spinner' size={10}/> By bugs, we mean unmatching subtitles. Sometimes,\r\n        the piece of subtitle could be a paraphrased version of what is said rather than word by word captions.\r\n        We would like to identify and remove those instances to provide you a better experience!\r\n          </div>\r\n        </div>\r\n        <br></br>\r\n        <br></br>\r\n        <a onClick={props.handleKörBara} style={{ display: showGuide ? 'none' : '' }} id='kör-bara'>Nu kör vi! <FaHeadphones size={17}/></a>\r\n        <div className='complete'></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About","/* eslint-disable quotes */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect } from 'react'\r\nimport subtitleService from './services/subtitles'\r\nimport contains from './functions/contains'\r\nimport buildYouTubeLinkArray from './functions/buildYouTubeLinkArray'\r\nimport tillTheNextStamp from './functions/tillTheNextStamp'\r\nimport Header from './components/Header'\r\nimport SearchBar from './components/SearchBar'\r\nimport Player from './components/Player'\r\nimport Subtitle from './components/Subtitle'\r\nimport Footer from './components/Footer'\r\nimport AdminBar from './components/AdminBar'\r\nimport About from './components/About'\r\nimport { FaSpinner, FaCog, FaRegSnowflake } from 'react-icons/fa'\r\nimport ReactGA from 'react-ga'\r\n\r\n\r\n//ReactGA.initialize('G-QVN49KPS52')\r\n\r\n\r\nconst AppCopy1 = () => {\r\n  const [subtitles, setSubtitles] = useState([])\r\n  const [appReady, setAppReady] = useState(false)\r\n  const [query, setQuery] = useState('')\r\n  const [youTubeLinks, setYouTubeLinks] = useState([])\r\n  const [videoIndex, setVideoIndex] = useState(0)\r\n  const [currentVideoId, setCurrentVideoId] = useState('vfQU6pI51ww')\r\n  const [wholeText, setWholeText] = useState([]) //the text part of the playing subtitle\r\n  const [shownSubtitles, setShownSubtitles] = useState(null)\r\n  const [shownSubtitlesArr, setShownSubtitlesArr] = useState([])\r\n  const [showSubtitle ,setShowSubtitle] = useState(false)\r\n  const [showStats, setShowStats] = useState(false)\r\n  const [playingVideoTime, setPlayingVideoTime] = useState(0)\r\n  const [windowWidth, setWindowWidth] = useState(0)\r\n  const [windowHeight, setWindowHeight] = useState(0)\r\n  const [width, setWidth] = useState()\r\n  const [height, setHeight] = useState()\r\n  const [youTubeContainerClassName, setYouTubeContainerClassName] = useState('iFrame')\r\n  const [autoplay, setAutoplay] = useState(0)\r\n  const [firstTimeIndex, setFirstTimeIndex] = useState(0)\r\n  const [about, setAbout] = useState(false)\r\n  const [showGuide, setShowGuide] = useState(false)\r\n  //for admin to manage removing buggy lines\r\n  const [queryVideoId, setQueryVideoId] = useState('')\r\n  const [bugId, setBugId] = useState('')\r\n  const [adminMesssage1, setAdminMessage1] = useState('')\r\n  const [currentSubtitle, setCurrentSubtitle] = useState(null)\r\n  const [adminMessage2, setAdminMessage2] = useState('')\r\n  const [adminMessage3, setAdminMessage3] = useState('')\r\n\r\n  const randomWords = ['skillnad', 'stark', 'tyckte', 'ärtsoppa',\r\n    'sovit', 'behagligt', 'kör', 'sig', 'riktig',\r\n    'möjligtvis', 'bollhjul', 'byggt', 'dagar',\r\n    'stenhårda', 'fyra', 'tittarna', 'skrynkliga',\r\n    'noggrann', 'badkar', 'jättekul', 'läskigt',\r\n    'börjar', 'själv', 'självklart', 'försiktig']\r\n\r\n  /*\r\n  useEffect(() => {\r\n    setWindowWidth(window.innerWidth)\r\n    setWindowHeight(window.innerHeight)\r\n  })\r\n  */\r\n\r\n  //iPhone 5/SE 320x568\r\n  //iPhone 6/7/8 375x667\r\n  //iPhone 6/7/8 Plus 414x736\r\n  //iPhone X 375x812\r\n  //iPad 768x1024\r\n  //iPad Pro 1024x1366\r\n\r\n  useEffect(() => {\r\n    //ReactGA.initialize('G-QVN49KPS52')\r\n    subtitleService\r\n      .getAll()\r\n      .then(subtitles => {\r\n        setAppReady(true)\r\n        setSubtitles(subtitles)\r\n      })\r\n    //ReactGA.pageview('/')\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    ReactGA.initialize('UA-186348116-1')\r\n    ReactGA.pageview('/')\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    if(window.innerWidth < 415){\r\n      //iPhone 5/SE/6/7/8\r\n      setWidth('320')\r\n      setHeight('200')\r\n    }else if(window.innerWidth < 668){\r\n      //iPhone 6/7/8 Plus\r\n      setWidth('400')\r\n      setHeight('300')\r\n    }else if(window.innerWidth > 668){\r\n      //iPad and PC\r\n      setWidth('640')\r\n      setHeight('360')\r\n    }\r\n  },[])\r\n\r\n  window.addEventListener('resize', (event) => {\r\n    event.preventDefault()\r\n    if(window.innerWidth < 415){\r\n      setWidth('310')\r\n      setHeight('200')\r\n    }else if(window.innerWidth < 668){\r\n      setWidth('400')\r\n      setHeight('300')\r\n    }else if(window.innerWidth > 668){\r\n      setWidth('640')\r\n      setHeight('360')\r\n    }\r\n  })\r\n\r\n  let updateWidth = () => {\r\n    switch (width) {\r\n    case '640':\r\n      setWidth('640.1')\r\n      break\r\n    case '640.1':\r\n      setWidth('640')\r\n      break\r\n    case '400':\r\n      setWidth('400.1')\r\n      break\r\n    case '400.1':\r\n      setWidth('400')\r\n      break\r\n    case '310':\r\n      setWidth('310.1')\r\n      break\r\n    case '310.1':\r\n      setWidth('310')\r\n      break\r\n    }\r\n  }\r\n\r\n  //hide/show starts\r\n\r\n  const showWhenVisible = { display: showSubtitle ? '' : 'none' }\r\n  const showStatsWhenVisible = { display: showStats ? '' : 'none' }\r\n\r\n  //hide/shoe ends\r\n\r\n  //handleQueryChange starts\r\n  const handleQueryChange = (event) => setQuery(event.target.value)\r\n\r\n  //handleSubmit starts\r\n  const handleSubmit = async(event) => {\r\n    event.preventDefault()\r\n    console.log(query)\r\n    let youTubeLinkList = []\r\n    let videoIDsThatContain = []\r\n    if(query !== ''){\r\n      try {\r\n        subtitles.forEach(subtitle => {\r\n          if(contains(query, subtitle.text)){\r\n            videoIDsThatContain.push(subtitle.videoId)\r\n          }\r\n        })\r\n        youTubeLinkList = buildYouTubeLinkArray(query, videoIDsThatContain, subtitles)\r\n        setYouTubeLinks(youTubeLinkList)\r\n        setVideoIndex(0)\r\n        let videoId = youTubeLinkList[0].id\r\n        setCurrentVideoId(videoId)\r\n        let time = youTubeLinkList[0].time\r\n        setPlayingVideoTime(time)\r\n\r\n        if(videoId === currentVideoId && time === playingVideoTime){\r\n          updateWidth()\r\n        }\r\n\r\n        let currentWholeText = youTubeLinkList[0].wholeText\r\n        setWholeText(currentWholeText)\r\n        let firstTimeIndex = youTubeLinkList[0].firstTimeIndex\r\n        setFirstTimeIndex(firstTimeIndex)\r\n        setAutoplay(1)\r\n        setShowSubtitle(false)\r\n        setShowStats(true)\r\n      } catch (error) {\r\n        if(videoIDsThatContain.length === 0) {\r\n          setCurrentVideoId('vfQU6pI51ww')\r\n          setWholeText([])\r\n          setFirstTimeIndex(0)\r\n          setPlayingVideoTime(0)\r\n          setAutoplay(0)\r\n          setShowStats(false)\r\n          setYouTubeLinks([])\r\n          let length = randomWords.length - 1\r\n          let word = randomWords[[Math.floor(Math.random()*length)]]\r\n          let text = `nothing found for ${query}, try '${word}'`\r\n          setShownSubtitles(text)\r\n          let shownSubtitlesArr = text.split(/[\\s\\n]+/)\r\n          setShownSubtitlesArr(shownSubtitlesArr)\r\n          setShowSubtitle(true)\r\n          /*\r\n          setTimeout(() => {\r\n            setShownSubtitles(null)\r\n            setShowSubtitle(false)\r\n          }, 5000)\r\n          */\r\n        }\r\n      }\r\n    } else {\r\n      setCurrentVideoId('vfQU6pI51ww')\r\n      setWholeText([])\r\n      setFirstTimeIndex(0)\r\n      setPlayingVideoTime(0)\r\n      setAutoplay(0)\r\n      setShowStats(false)\r\n      setYouTubeLinks([])\r\n      let length = randomWords.length - 1\r\n      let word = randomWords[[Math.floor(Math.random()*length)]]\r\n      let text = `Please type something, try '${word}'`\r\n      setShownSubtitles(text)\r\n      let shownSubtitlesArr = text.split(/[\\s\\n]+/)\r\n      setShownSubtitlesArr(shownSubtitlesArr)\r\n      setShowSubtitle(true)\r\n    }\r\n    /*\r\n    try {\r\n      subtitles.forEach(subtitle => {\r\n        if(contains(query, subtitle.text)){\r\n          videoIDsThatContain.push(subtitle.videoId)\r\n        }\r\n      })\r\n      youTubeLinkList = buildYouTubeLinkArray(query, videoIDsThatContain, subtitles)\r\n      setYouTubeLinks(youTubeLinkList)\r\n      setVideoIndex(0)\r\n      let videoId = youTubeLinkList[0].id\r\n      setCurrentVideoId(videoId)\r\n      let time = youTubeLinkList[0].time\r\n      setPlayingVideoTime(time)\r\n\r\n      if(videoId === currentVideoId && time === playingVideoTime){\r\n        updateWidth()\r\n      }\r\n\r\n      let currentWholeText = youTubeLinkList[0].wholeText\r\n      setWholeText(currentWholeText)\r\n      let firstTimeIndex = youTubeLinkList[0].firstTimeIndex\r\n      setFirstTimeIndex(firstTimeIndex)\r\n      setAutoplay(1)\r\n      setShowSubtitle(false)\r\n      setShowStats(true)\r\n    } catch (error) {\r\n      if(videoIDsThatContain.length === 0) {\r\n        setCurrentVideoId('vfQU6pI51ww')\r\n        setWholeText([])\r\n        setFirstTimeIndex(0)\r\n        setPlayingVideoTime(0)\r\n        setAutoplay(0)\r\n        setShowStats(false)\r\n        setYouTubeLinks([])\r\n        let length = randomWords.length - 1\r\n        let word = randomWords[[Math.floor(Math.random()*length)]]\r\n        let text = `nothing found for ${query}, try '${word}'`\r\n        setShownSubtitles(text)\r\n        let shownSubtitlesArr = text.split(/[\\s\\n]+/)\r\n        setShownSubtitlesArr(shownSubtitlesArr)\r\n        setShowSubtitle(true)\r\n        /*\r\n        setTimeout(() => {\r\n          setShownSubtitles(null)\r\n          setShowSubtitle(false)\r\n        }, 5000)\r\n      }\r\n    }\r\n    */\r\n  }\r\n  ////handleSubmit ends\r\n\r\n  //opts starts\r\n  const opts = {\r\n    height: height,\r\n    width: width,\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      cc_lang_pref: 'sv',\r\n      autoplay: autoplay,\r\n      start: playingVideoTime,\r\n      cc_load_policy: autoplay,\r\n      enablejsapi: 1,\r\n    },\r\n  }\r\n  //opts ends\r\n\r\n  //onPlay starts\r\n  const onPlay = (event) => {\r\n    if(wholeText.length>0){\r\n      let theTextBetweenTwoStamps = tillTheNextStamp(playingVideoTime, firstTimeIndex, wholeText)\r\n      setShownSubtitles(theTextBetweenTwoStamps.text)\r\n      let shownSubtitlesArr = theTextBetweenTwoStamps.text.split(/[\\s\\n]+/)\r\n      setShownSubtitlesArr(shownSubtitlesArr)\r\n      setShowSubtitle(true)\r\n      let timeOut = theTextBetweenTwoStamps.timeDifference*1000\r\n      setTimeout(() => {\r\n        setShowSubtitle(false)\r\n      }, timeOut)\r\n    }\r\n  }\r\n  //onPlay ends\r\n\r\n  //handleBack starts\r\n  const handleBack = async(event) => {\r\n    event.preventDefault()\r\n    if(videoIndex >= 1){\r\n      setVideoIndex(videoIndex-1)\r\n      let videoId = youTubeLinks[videoIndex-1].id\r\n      setCurrentVideoId(videoId)\r\n      let time = youTubeLinks[videoIndex-1].time\r\n      setPlayingVideoTime(time)\r\n\r\n      if(videoId === currentVideoId && time === playingVideoTime){\r\n        updateWidth()\r\n      }\r\n\r\n      let currentWholeText = youTubeLinks[videoIndex-1].wholeText\r\n      setWholeText(currentWholeText)\r\n      let firstTimeIndex = youTubeLinks[videoIndex-1].firstTimeIndex\r\n      setFirstTimeIndex(firstTimeIndex)\r\n      setShowSubtitle(false)\r\n    }\r\n  }\r\n  //handleBack ends\r\n\r\n  //handleKörOm starts\r\n  const handleKörOm = async(event) => {\r\n    event.preventDefault()\r\n    setShowSubtitle(true)\r\n    updateWidth()\r\n  }\r\n  //handleKörOm ends\r\n\r\n  //handleBack starts\r\n  const handleNext = async(event) => {\r\n    event.preventDefault()\r\n    if(videoIndex < (youTubeLinks.length-1)){\r\n      setVideoIndex(videoIndex+1)\r\n      let videoId = youTubeLinks[videoIndex+1].id\r\n      setCurrentVideoId(videoId)\r\n      let time = youTubeLinks[videoIndex+1].time\r\n      setPlayingVideoTime(time)\r\n      updateWidth()\r\n      let currentWholeText = youTubeLinks[videoIndex+1].wholeText\r\n      setWholeText(currentWholeText)\r\n      let firstTimeIndex = youTubeLinks[videoIndex+1].firstTimeIndex\r\n      setFirstTimeIndex(firstTimeIndex)\r\n      setShowSubtitle(false)\r\n    }\r\n  }\r\n  //handleBack ends\r\n\r\n  //handleBug starts\r\n  const handleBug = async(subtitleObject) => {\r\n    console.log(subtitleObject.videoId)\r\n    try {\r\n      let buggyLines = subtitleObject.buggyLines\r\n      const youTubeLink = youTubeLinks[videoIndex]\r\n      const timeStamp = youTubeLink.timeStamp\r\n      const hour = timeStamp.substring(0,2)\r\n      const minutes = timeStamp.substring(3,5)\r\n      const seconds = timeStamp.substring(6,8)\r\n      const mseconds = timeStamp.substring(9,12)\r\n      const bugId = `${youTubeLink.id}_${hour}${minutes}${seconds}${mseconds}`\r\n\r\n      //buggyLines = []\r\n\r\n      if(!buggyLines.find(bug => bug.bugId === bugId)){\r\n        //to clean the buggyLines of the subtitleObject disable from here to\r\n        buggyLines.push(\r\n          {\r\n            bugId: bugId,\r\n            buggyText: youTubeLink.lineText,\r\n            lineIndex: youTubeLink.lineIndex,\r\n            time: youTubeLink.time,\r\n            timeStamp: youTubeLink.timeStamp,\r\n            firstTimeIndex: youTubeLink.firstTimeIndex,\r\n            nextTimeStamp: youTubeLink.nextTimeStamp,\r\n            secondTimeIndex: youTubeLink.secondTimeIndex,\r\n            link: youTubeLink.youtubeLink })\r\n        //... to here\r\n        const newSubtitle = await subtitleService.reportBug({\r\n          //channelTitle: subtitleObject.channelTitle,\r\n          //videoId: subtitleObject.videoId,\r\n          videoId: subtitleObject.videoId,\r\n          buggyLines: buggyLines,\r\n          //text: subtitleObject.text\r\n        })\r\n      }else{\r\n        console.log('already reported')\r\n      }\r\n      window.confirm('You found and reported a bug! Thank you for helping us and other learners!')\r\n    } catch (e) {\r\n      console.log(e)\r\n      console.log('handleBug failed')\r\n    }\r\n  }\r\n  //handleBug ends\r\n\r\n  const handleShow = () => setShowSubtitle(true)\r\n  const handleHide = () => setShowSubtitle(false)\r\n\r\n  //Admin\r\n  //\r\n\r\n  const handleQueryVideoIdChange = (event) => setQueryVideoId(event.target.value)\r\n  const handleQueryBugIdChange = (event) => setBugId(event.target.value)\r\n\r\n  //find video by its id\r\n  const searchVideoById = async(event) => {\r\n    event.preventDefault()\r\n    try {\r\n      setWholeText([])\r\n      setFirstTimeIndex(0)\r\n      setPlayingVideoTime(0)\r\n      setAutoplay(0)\r\n      setShowStats(false)\r\n      setYouTubeLinks([])\r\n\r\n      if(subtitles.find( subtitle => subtitle.videoId === queryVideoId)){\r\n        setCurrentVideoId(queryVideoId)\r\n        setAdminMessage1(`${queryVideoId} found`)\r\n        setCurrentSubtitle(subtitles.find( subtitle => subtitle.videoId === queryVideoId))\r\n      }else {\r\n        setCurrentVideoId('5bfx6BNufdE')\r\n        setAdminMessage1('This subtitle is not in the db')\r\n        setBugId('')\r\n        setAdminMessage2('')\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n      setAdminMessage1('There was an error, check the console')\r\n      setWholeText([])\r\n      setFirstTimeIndex(0)\r\n      setPlayingVideoTime(0)\r\n      setAutoplay(0)\r\n      setShowStats(false)\r\n      setYouTubeLinks([])\r\n      setCurrentVideoId('5bfx6BNufdE')\r\n    }\r\n  }\r\n\r\n  const searchBugById = async(event) => {\r\n    event.preventDefault()\r\n\r\n    try {\r\n      if(currentSubtitle.buggyLines.find(bug => bug.bugId === bugId)){\r\n        setAdminMessage2(`${bugId} found`)\r\n        setBugId(bugId)\r\n        let buggyLine = currentSubtitle.buggyLines.find(bug => bug.bugId === bugId)\r\n        setPlayingVideoTime(buggyLine.time)\r\n        setAutoplay(1)\r\n        setShownSubtitles(false)\r\n      } else {\r\n        setAdminMessage2(`${bugId} not found`)\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n      setAdminMessage2(`There was an error, see the console, ${bugId} not found`)\r\n    }\r\n\r\n  }\r\n\r\n  //handleCorrect starts\r\n  const handleCorrect = async( subtitleObject, bugId ) => {\r\n    const buggyLine = subtitleObject.buggyLines.find(buggyLine => buggyLine.bugId === bugId)\r\n    console.log(buggyLine)\r\n    const confirmation = window.confirm(`Do you really want to remove the part from ${buggyLine.timeStamp} to ${buggyLine.nextTimeStamp}?`)\r\n    //const buggyLine = subtitleObject.buggyLines.find(buggyLine => buggyLine.bugId === bugId)\r\n\r\n    if(confirmation){\r\n      try {\r\n        const deleteFrom = buggyLine.firstTimeIndex\r\n        const deleteUpTo = buggyLine.secondTimeIndex\r\n        const deleteCount = deleteUpTo - deleteFrom\r\n        const buggyLines = subtitleObject.buggyLines.slice()\r\n        console.log(buggyLines)\r\n        const correctedBuggyLines = buggyLines.filter(buggyLine => buggyLine.bugId !== bugId)\r\n        console.log(correctedBuggyLines)\r\n        const correctedText = subtitleObject.text\r\n        correctedText.splice(deleteFrom, deleteCount)\r\n        const newSubtitle = await subtitleService.deleteBuggyLines({\r\n          //channelTitle: subtitleObject.channelTitle,\r\n          //videoId: subtitleObject.videoId,\r\n          id: subtitleObject.id,\r\n          buggyLines: correctedBuggyLines,\r\n          text: correctedText\r\n        })\r\n        setAdminMessage3(`${bugId} corrected`)\r\n      } catch (error) {\r\n        console.log(error)\r\n        setAdminMessage3('Correction failed, see the conssole')\r\n        //setAdminMessage('subtitle could not be corrected')\r\n      }\r\n    }else {\r\n      setAdminMessage3('Correction cancelled')\r\n    }\r\n\r\n  }\r\n  //handleCorrect ends\r\n\r\n  //reset starts\r\n  const reset = () => {\r\n    updateWidth()\r\n    setAbout(false)\r\n    setQuery('')\r\n    setCurrentVideoId('vfQU6pI51ww')\r\n    setWholeText([])\r\n    setFirstTimeIndex(0)\r\n    setPlayingVideoTime(0)\r\n    setAutoplay(0)\r\n    setShowStats(false)\r\n    setYouTubeLinks([])\r\n    setShownSubtitles(null)\r\n    setShownSubtitlesArr([])\r\n    setShowSubtitle(false)\r\n  }\r\n  //reset ends\r\n\r\n  const handleHome = async(event) => {\r\n    event.preventDefault()\r\n    reset()\r\n  }\r\n\r\n  const handleLogoButton = async(event) => {\r\n    event.preventDefault()\r\n    reset()\r\n  }\r\n\r\n  const aboutPage = () => (\r\n    <div>\r\n      <Header\r\n        logo = {handleLogoButton}\r\n        about ={() => setAbout(true)}\r\n        home = {handleHome}\r\n      />\r\n      <div id='main-container-about' className='container'>\r\n        <About handleKörBara={() => setAbout(false)}/>\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  )\r\n\r\n  const appItself = () => (\r\n    <div>\r\n      <Header\r\n        logo = {handleLogoButton}\r\n        about ={() => setAbout(true)}\r\n        home = {handleHome}\r\n      />\r\n      <AdminBar\r\n        queryVideoId = {queryVideoId}\r\n        handleQueryVideoIdChange = {handleQueryVideoIdChange}\r\n        searchVideoById = {searchVideoById}\r\n        adminMessage1={adminMesssage1}\r\n        queryBugId={bugId}\r\n        handleQueryBugIdChange={handleQueryBugIdChange}\r\n        searchBugById={searchBugById}\r\n        adminMessage2={adminMessage2}\r\n        handleCorrect={() => handleCorrect(currentSubtitle, bugId)}\r\n        adminMessage3={adminMessage3}\r\n      />\r\n      <div>\r\n        <div className='container'>\r\n          <SearchBar\r\n            query={query}\r\n            handleQueryChange={handleQueryChange}\r\n            handleSubmit={handleSubmit}/>\r\n          <div className='player-all'>\r\n            <Player\r\n              videoId={currentVideoId}\r\n              opts={opts}\r\n              containerClassName={youTubeContainerClassName}\r\n              handleBack={handleBack}\r\n              handleKörOm={handleKörOm}\r\n              handleNext={handleNext}\r\n              onPlay={onPlay}\r\n              showStats={showStats}\r\n              videoIndex={videoIndex+1}\r\n              length={youTubeLinks.length}\r\n              handleBug={() => handleBug(subtitles.find(subtitle => subtitle.videoId === currentVideoId))}\r\n            />\r\n          </div>\r\n          <Subtitle\r\n            showSubtitle={showSubtitle}\r\n            shownSubtitles={shownSubtitles}\r\n            shownSubtitlesArr={shownSubtitlesArr}\r\n            handleShow={handleShow}\r\n            handleHide={handleHide}\r\n            query={query}\r\n          />\r\n        </div>\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  if(!appReady) {\r\n    return (\r\n      <div className=\"loading\">\r\n        <span>youttala</span>\r\n        <span><FaRegSnowflake className='spinner' size={19}></FaRegSnowflake></span>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div>\r\n        {about ? aboutPage() : appItself()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppCopy1\r\n","/* eslint-disable linebreak-style */\n/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport AppCopy from './AppCopy'\nimport ComingSoon from './ComingSoon'\nimport AppCopy1 from './AppCopy1'\nimport UnderMaintenance from './UnderMaintenance'\n\n\n\n\nReactDOM.render(\n  <AppCopy1 />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}